plugins {
    id "com.github.johnrengelman.shadow" version "7.0.0"
}

archivesBaseName = archivesBaseName + "-FABRIC"

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.loader_version}"

    modApi "net.fabricmc.fabric-api:fabric-api-base:${project.api_base_version}"
    modApi "net.fabricmc.fabric-api:fabric-lifecycle-events-v1:${project.lifecycle_events_version}"
    modApi "net.fabricmc.fabric-api:fabric-key-binding-api-v1:${project.key_bind_api_version}"
    modApi "net.fabricmc.fabric-api:fabric-resource-loader-v0:${project.resource_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-command-api-v1:${project.command_api_version}"

    include "net.fabricmc.fabric-api:fabric-api-base:${project.api_base_version}"
    include "net.fabricmc.fabric-api:fabric-lifecycle-events-v1:${project.lifecycle_events_version}"
    include "net.fabricmc.fabric-api:fabric-key-binding-api-v1:${project.key_bind_api_version}"
    include "net.fabricmc.fabric-api:fabric-resource-loader-v0:${project.resource_loader_version}"
    include "net.fabricmc.fabric-api:fabric-command-api-v1:${project.command_api_version}"


    include "org.graalvm.sdk:graal-sdk:${project.graal_version}"
    include "org.graalvm.js:js:${project.graal_version}"
    include "org.graalvm.truffle:truffle-api:${project.graal_version}"
    include "org.graalvm.regex:regex:${project.graal_version}"
//		include "org.graalvm.compiler:compiler:${project.graal_version}"
//		include "org.graalvm.compiler:compiler-management:${project.graal_version}"
    include "io.noties:prism4j:${project.prism_version}"
    include "com.neovisionaries:nv-websocket-client:2.10"
    include "org.javassist:javassist:3.28.0-GA"


    modImplementation("curse.maven:modmenu-308702:${project.mod_menu_version}") {
        transitive = false
    }
    //for modmenu
    modImplementation "net.fabricmc.fabric-api:fabric-screen-api-v1:1.0.4+155f865c13"

    common(project(path: ":common", configuration: "dev")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}


task createDist(type: Copy) {
    from(new File(project.buildDir, "libs"))
    into new File(rootProject.rootDir, "dist")
}

build.finalizedBy(createDist)
